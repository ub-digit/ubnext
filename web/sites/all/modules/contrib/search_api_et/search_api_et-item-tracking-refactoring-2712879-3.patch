diff --git a/includes/SearchApiEtDatasourceController.php b/includes/SearchApiEtDatasourceController.php
index 10580bb..526b805 100644
--- a/includes/SearchApiEtDatasourceController.php
+++ b/includes/SearchApiEtDatasourceController.php
@@ -283,10 +283,6 @@ class SearchApiEtDatasourceController extends SearchApiEntityDataSourceControlle
       // Sometimes we get item_ids not meant to be tracked, just filter them out.
       $ids = $this->filterTrackableIds($index, $item_ids);
       if ($ids) {
-        // Some times the item could be already in the index, let try to remove
-        // them before inserting.
-        parent::trackItemDelete($ids, array($index));
-
         // Actually add the items to the index.
         parent::trackItemInsert($ids, array($index));
         $ret[$index_id] = $index;
@@ -296,37 +292,6 @@ class SearchApiEtDatasourceController extends SearchApiEntityDataSourceControlle
   }
 
   /**
-   * {@inheritdoc}
-   * @param $item_ids array|string
-   * @param $indexes SearchApiIndex[]
-   * @param $dequeue bool
-   */
-  public function trackItemChange($item_ids, array $indexes, $dequeue = FALSE) {
-    // If this method was called from _search_api_index_reindex(), $item_ids
-    // will be set to FALSE, which means we need to reindex all items, so no
-    // need for any other processing below.
-    if ($item_ids === FALSE) {
-      parent::trackItemChange($item_ids, $indexes, $dequeue);
-      return NULL;
-    }
-
-    $ret = array();
-    foreach ($indexes as $index_id => $index) {
-      // The $item_ids can contain a single EntityID if we get invoked from the
-      // hook: search_api_et_entity_update(). In this case we need to, for each
-      // Index, identify the set of ItemIDs that need to be marked as changed.
-      // Check if we get Entity IDs or Item IDs.
-      $ids = $this->filterTrackableIds($index, $item_ids);
-
-      if (!empty($ids)) {
-        parent::trackItemChange($ids, array($index), $dequeue);
-        $ret[$index_id] = $index;
-      }
-    }
-    return $ret;
-  }
-
-  /**
    * Retrieves all Item IDs from the given index, filtered by the Entity IDs.
    *
    * Is used instead of SearchApiAbstractDataSourceController::getAllItemIds(),
@@ -364,45 +329,6 @@ class SearchApiEtDatasourceController extends SearchApiEntityDataSourceControlle
   }
 
   /**
-   * {@inheritdoc}
-   */
-  public function trackItemDelete(array $item_ids, array $indexes) {
-    $ret = array();
-
-    $search_api_et_ids = array();
-    $ids_to_expand = array();
-    foreach ($item_ids as $item_id) {
-      // If this is a valid Search API ET ID just use it as is.
-      if (SearchApiEtHelper::isValidItemId($item_id)) {
-        $search_api_et_ids[] = $item_id;
-      }
-      else {
-        // The $item_ids can contain also single entity ID if we get invoked
-        // from search_api_entity_delete(). In this case we need to, for each
-        // Index, identify the set of Item IDs that need to be marked as
-        // deleted. This has to be done index specific - so we collect the IDs
-        // to process and handle them in the index loop.
-        $ids_to_expand[] = $item_id;
-      }
-    }
-
-    foreach ($indexes as $index_id => $index) {
-      // Collect all the IDs to delete, expand non search-api-et IDs according
-      // to the index.
-      $ids = $search_api_et_ids;
-      if (!empty($ids_to_expand)) {
-        $ids = array_merge($ids, $this->getTrackableItemIdsFromMixedSource($index, $ids_to_expand));
-      }
-
-      if ($ids) {
-        parent::trackItemDelete($ids, array($index));
-        $ret[$index_id] = $index;
-      }
-    }
-    return $ret;
-  }
-
-  /**
    * Helper function to return the list of ItemIDs, fiven
    * @param \SearchApiIndex $index
    * @param $mixed_ids
@@ -491,11 +417,11 @@ class SearchApiEtDatasourceController extends SearchApiEntityDataSourceControlle
     // Generate the list of candidate ItemIDs from the current EntityIDs
     $trackable_item_ids = $this->getTrackableItemIds($index, array_keys($grouped_item_ids));
 
-    // The $trackable_item_ids will contain all ItemIDs that should be indexed.
-    // Additional translations, other than the one provided in $item_ids, will
-    // be taken into account, to cover the case when a non-translatable field is
-    // changed on one translation and such change must be reflected to all other
-    // indexed translations.
-    return $trackable_item_ids;
+    // This is important: of all the possible trackable item ids for the
+    // entities of the inserted translation, only insert the ones also present
+    // in $items_ids, since among all the trackable item ids there could exist
+    // items which has already been inserted (and instead will be updated in
+    // hook_entity_update)
+    return array_intersect($item_ids, $trackable_item_ids);
   }
 }
diff --git a/search_api_et.module b/search_api_et.module
index fb92f2c..ac8b216 100644
--- a/search_api_et.module
+++ b/search_api_et.module
@@ -305,39 +305,50 @@ function search_api_et_item_languages($entity, $entity_type, SearchApiIndex $ind
 function search_api_et_entity_update($entity, $entity_type) {
   // We only react on entity operations for types with property information, as
   // we don't provide search integration for the others.
-  if (!entity_get_property_info($entity_type)) {
+  if (
+      !entity_get_property_info($entity_type) ||
+      !entity_translation_enabled($entity_type, $entity)
+  ) {
     return;
   }
 
+  module_load_include('inc', 'search_api_et');
   list($entity_id, $revision, $bundle) = entity_extract_ids($entity_type, $entity);
   $et_entity_type = SearchApiEtHelper::getItemType($entity_type);
 
-  // Use the translation handler to fetch the main language of the entity.
-  // entity_language() together with entity_translation returns the current
-  // form language of an entity. Hence if the entity is translated the form
-  // language usually differs from the main language - what would lead to the
-  // removal of a valid tracking language.
+  // entity_language will not work since formLanguage will be called
+  // which will always return the form language language, that is
+  // the language of $entity even though $entity->original is in a
+  // different language.
+  $handler = entity_translation_get_handler($entity_type, $entity);
+  $language = $handler->getLanguage();
+
   if (!isset($entity->original) || !is_object($entity->original)) {
     $entity->original = entity_load_unchanged($entity_type, $entity_id);
   }
-  if (entity_translation_enabled($entity_type, $entity)) {
-    $translation_handler = entity_translation_get_handler($entity_type, $entity);
-    $language = $translation_handler->getLanguage();
-    $translation_handler_original = entity_translation_get_handler($entity_type, $entity->original);
-    $old_language = $translation_handler_original->getLanguage();
-  }
-  else {
-    $language = entity_language($entity_type, $entity);
-    $old_language = entity_language($entity_type, $entity->original);
-  }
+  $handler = entity_translation_get_handler($entity_type, $entity->original);
+  $old_language = $handler->getLanguage();
+
+  $inserted_language = null;
 
-  // If the entity language has changed, remove the old item from the index.
-  if (!empty($language) && !empty($old_language) && $language !== $old_language) {
+  // Check if the entity language has been changed.
+  // If the entity language has changed, remove the old tracked Item from the
+  // index.
+  if (!empty($language) && !empty($old_language) && $language != $old_language) {
     search_api_track_item_delete($et_entity_type, array(SearchApiEtHelper::buildItemId($entity_id, $old_language)));
     search_api_track_item_insert($et_entity_type, array(SearchApiEtHelper::buildItemId($entity_id, $language)));
+    $inserted_language = $language;
+  }
+  $item_ids = array();
+  foreach (search_api_et_item_languages_entity($entity, $entity_type) as $language) {
+    if (!isset($inserted_language) || $language !== $inserted_language) {
+      $item_ids[] = SearchApiEtHelper::buildItemId($entity_id, $language);
+    }
   }
-  else {
-    search_api_track_item_change($et_entity_type, array(SearchApiEtHelper::buildItemId($entity_id, $language)));
+
+  // Track the changes of translations.
+  if (!empty($item_ids)) {
+    search_api_track_item_change($et_entity_type, $item_ids);
   }
 }
 
@@ -357,16 +368,6 @@ function search_api_et_entity_translation_insert($entity_type, $entity, $transla
 }
 
 /**
- * Implements hook_entity_translation_update().
- */
-function search_api_et_entity_translation_update($entity_type, $entity, $translation, $values = array()) {
-  list($entity_id) = entity_extract_ids($entity_type, $entity);
-  $item_id = SearchApiEtHelper::buildItemId($entity_id, $translation['language']);
-
-  search_api_track_item_change(SearchApiEtHelper::getItemType($entity_type), array($item_id));
-}
-
-/**
  * Implements hook_entity_translation_delete().
  */
 function search_api_et_entity_translation_delete($entity_type, $entity, $langcode) {
