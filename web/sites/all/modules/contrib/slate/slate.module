<?php
/**
 * @file
 */


/**
 * Implements hook_menu().
 */
function slate_menu() {
  $base = array(
    'access callback' => 'user_access',
    'access arguments' => array('administer slate'),
    'file' => 'includes/slate.admin.inc',
  );

  $items['admin/structure/slate'] = array(
    'title' => 'Slate',
    'title callback' => FALSE, // Slate is a name, should not be translated!
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slate_list_page'),
    'type' => MENU_NORMAL_ITEM,
  ) + $base;

  $items['admin/structure/slate/list'] = array(
    'title' => 'List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slate_list_page'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  ) + $base;

  $items['admin/structure/slate/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slate_settings_page'),
    'type' => MENU_LOCAL_TASK,
  ) + $base;

  return $items;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function slate_ctools_plugin_type() {
  $plugins['slate_model'] = array(
    'child plugins' => TRUE,
    'classes' => array(
      'handler'
    ),
  );

  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function slate_ctools_plugin_directory($module, $plugin) {
  if ($module === 'slate' && in_array($plugin, array('slate_model'))) {
    return "plugins/{$plugin}";
  }
  if ($module === 'ctools' && in_array($plugin, array('content_types'))) {
    return "plugins/{$plugin}";
  }
}

/**
 * Implements hook_views_api().
 */
function slate_views_api() {
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'slate') . '/views',
  );
}

/**
 * Load a Slate model plugin.
 */
function slate_load_model($model) {
  ctools_include('plugins');

  $plugin = ctools_get_plugins('slate', 'slate_model', $model['type']);

  return SlateModelPlugin::factory($plugin, $model);
}

/**
 * Return a Twig instance.
 */
function slate_twig_instance() {
  static $twig;

  if (isset($twig)) {
    return $twig;
  }

  $path = libraries_get_path('twig');

  require_once $path . '/lib/Twig/Autoloader.php';

  Twig_Autoloader::register();

  //TODO: Composer autoloader?
  $extensions_path = libraries_get_path('twig-extensions');

  if ($extensions_path) {
    require_once $extensions_path . '/lib/Twig/Extensions/Autoloader.php';
    Twig_Extensions_Autoloader::register();
  }

  $loaders = module_invoke_all('slate_twig_loaders');

  drupal_alter('slate_twig_loaders', $loaders);

  if (empty($loaders)) {
    // @todo oh, this is not good!

    throw new Exception('No loaders found.');
  }

  if (count($loaders) > 1) {
    $loader = new Twig_Loader_Chain(array_values($loaders));
  }
  else {
    $loader = reset($loaders);
  }

  $environment = array();

  drupal_alter('slate_twig_environment', $environment);

  $twig = new Twig_Environment($loader, $environment);

  if(module_exists('date')) {
    // User configurable timezones will not play well
    // with cache, so set timezone globally
    // TODO: option for this?
    $twig->getExtension('core')->setTimezone(date_default_timezone(FALSE));
  }

  drupal_alter('slate_twig', $twig);

  return $twig;
}

function slate_is_cacheable($allow_caching = NULL, $initialize_context = FALSE) {
  $allow_caching_static = &drupal_static(__FUNCTION__, array());
  if ($initialize_context) {
    array_push($allow_caching_static, $allow_caching);
  }
  else if (isset($allow_caching)) {
    // If set to FALSE, should not also invalidate
    // caching for all parent contexts in stack!?!?
    // Probably did not think about that
    // TODO: Fix (not a problem right now though since don't have
    // conditional caching at stack depth > 1)
    end($allow_caching_static);
    $i = key($allow_caching_static);
    $allow_caching_static[$i] = $allow_caching;
  }
  else {
    return array_pop($allow_caching_static);
  }
}

/**
 * Implements hook_flush_caches().
 */
function slate_flush_caches() {
  slate_twig_instance()->clearCacheFiles();

  return array();
}

/**
 * Render slate.
 */
function slate_render($slate, $models = array()) {
  $slate_info = slate_get_slate($slate);

  if (empty($slate_info)) {
    // @todo OH NO!!!

    return;
  }

  foreach ($slate_info['models'] as $model => $model_info) {
    if (!isset($models[$model])) {
      // @todo OH NO!!!

      return;
    }

    $plugin = slate_load_model($model_info);

    if (empty($plugin)) {
      // @todo OH NO!!!

      return;
    }
    $models[$model] = $plugin->wrapper($models[$model]);
  }

  $cache_enabled = variable_get('slate_cache_enabled', FALSE) && !(isset($slate_info['cacheable']) && empty($slate_info['cacheable']));
  try {
    if($cache_enabled) {
      $cache_data = array();
      foreach($models as $model) {
        //TODO: change this to something more reliable
        //TODO: Or add language content only once for small speed gain + small
        //risk of errant caching?
        if($model instanceof SlateModelPluginEntityWrapper) {
          static $uuid_enabled = NULL;
          static $uuid_revision_keys = array();

          // module_exists is actually not super-fast, so cache result to avoid
          // multiple calls
          if (!isset($uuid_enabled)) {
            $uuid_enabled = module_exists('uuid');
          }

          // Default value
          $cache_key_source = 'hash';

          // No cache key generation method set, try to select best option
          if (!isset($slate_info['cache_key'])) {
            if ($uuid_enabled && $model->type() === 'node') {
              $node_options = variable_get('node_options_' . $model->value()->type, array());
              if (in_array('revision', $node_options)) {
                $cache_key_source = 'vuuid';
              }
            }
          }
          else {
            $cache_key_source = $slate_info['cache_key'];
          }

          //Replace with constants?
          if ($cache_key_source === 'vuuid') {
            $entity_type = $model->type();
            if (!isset($uuid_revision_keys[$entity_type])) {
              $entity_info = $model->entityInfo();
              $uuid_revision_keys[$entity_type] =
                isset($entity_info['entity keys']['revision uuid']) ? $entity_info['entity keys']['revision uuid'] : FALSE;
            }
          }

          // VUUID not set, fall back to hash-based key
          if ($cache_key_source === 'vuuid' && (!isset($uuid_revision_keys[$entity_type]) || empty($uuid_revision_keys[$entity_type]))) {
            $cache_key_source = 'hash';
          }

          $language = $model->getPropertyLanguage();
          $entity_value = $model->value();

          $cache_data[] = array(
            $language->language,
          );

          if ($cache_key_source === 'vuuid') {
            $cache_data[] = $entity_value->{$uuid_revision_keys[$entity_type]};
          }
          else if($cache_key_source === 'hash') {
            $cache_data[] = $entity_value;
          }
        }
        else {
          $cache_data[] = $model;
        }
      }
      global $language_content;
      $cache_data[] = $language_content->language;
      $cache_data[] = $slate;

      if(variable_get('slate_cache_slate_file_hash', FALSE)) {
        $cache_data[] = md5_file($slate_info['path'] . DIRECTORY_SEPARATOR . $slate_info['file']);
      }

      $cache_key = 'slate:' . (md5(extension_loaded('igbinary') ? igbinary_serialize($cache_data) : serialize($cache_data)));
      //TODO: our own cache bin?
      $cache = cache_get($cache_key);
      if(isset($cache->data)) {
        $content = $cache->data;
      }
    }

    if(!isset($content)) {
      if($cache_enabled) {
        // Initialize cache context on stack
        slate_is_cacheable(TRUE, TRUE);
      }
      $content = slate_twig_instance()->render($slate_info['file'], $models);
      if($cache_enabled) {
        // This also pops off the current context of the stack
        if(slate_is_cacheable()) {
          cache_set($cache_key, $content);
        }
      }
    }

    if (variable_get('slate_comments_enabled', FALSE)) {
      $content = '<!-- ' . $slate_info['file'] . ' -->' . $content;
    }

    return $content;
  }
  catch (Twig_Error $e) {
    drupal_set_message($e->getMessage(), 'error');

    return '';
  }
}

/**
 * Return all slates.
 */
function slate_get_slates() {
  $slates = &drupal_static(__FUNCTION__);

  if (!isset($slates)) {
    if ($cached = cache_get(__FUNCTION__)) {
      $slates = $cached->data;

      return $slates;
    }

    $default = array(
      'models' => array(),
    );

    $slates = module_invoke_all('slate_info');
    foreach ($slates as &$slate) {
      $slate += $default;
    }

    drupal_alter('slate_info', $slates);

    cache_set(__FUNCTION__, $slates);
  }

  return $slates;
}

/**
 * Return a slate.
 */
function slate_get_slate($slate) {
  $slates = slate_get_slates();

  if (!isset($slates[$slate])) {
    // @todo error!

    return FALSE;
  }

  return $slates[$slate];
}


/**
 * Get template paths.
 */
function _slate_template_paths() {
  $paths = array();

  foreach (_slate_template_files() as $file) {
    $paths[dirname($file->uri)] = NULL;
  }

  return array_keys($paths);
}

/**
 * Get template files.
 */
function _slate_template_files() {
  $files = &drupal_static(__FUNCTION__);

  if (!isset($files)) {
    if ($cached = cache_get(__FUNCTION__)) {
      $files = $cached->data;

      return $files;
    }

    $files = array();
    foreach (array('themes', 'modules') as $type) {
      $files += drupal_system_listing('/\.html\.twig/', $type, 'name', 0);
    }

    cache_set(__FUNCTION__, $files);
  }

  return $files;
}

/**
 * Implements hook_slate_info().
 */
function slate_slate_info() {
  $slates = array();

  foreach (_slate_template_files() as $file) {
    $data = file_get_contents($file->uri);

    if (preg_match('@{#\s+slate\s+(.*?)#}\s*$@ims', $data, $matches)) {
      $info = drupal_parse_info_format($matches[1]);

      if (empty($info['name'])) {
        // @todo some kind of warning?
        continue;
      }

      if (isset($info['conf'])) {
        $info['models']['conf'] = 'item';
      }

      if (!empty($info['models'])) {
        foreach ($info['models'] as $model => &$model_info) {
          if (is_string($model_info)) {
            $model_info = array(
              'label' => ucfirst($model),
              'type' => $model_info,
            );
          }
        }
      }

      $info['file'] = $file->filename;
      $info['path'] = dirname($file->uri);

      $slates[str_replace('.html.twig', '', $file->filename)] = $info;
    }
  }

  return $slates;
}

/**
 * Implements hook_slate_twig_loaders().
 */
function slate_slate_twig_loaders() {
  $loaders['default'] = new Twig_Loader_Filesystem(_slate_template_paths());

  return $loaders;
}

/**
 * Implements hook_slate_twig_environment_alter().
 */
function slate_slate_twig_environment_alter(&$environment) {
  if (variable_get('slate_debug_enabled', FALSE)) {
    $environment['debug'] = TRUE;
    $environment['cache'] = FALSE;
    $environment['auto_reload'] = TRUE;
  }
  else {
    $environment['cache'] = file_directory_temp() . '/twig';
  }
}

/**
 * Implements hook_slate_twig_alter().
 */
function slate_slate_twig_alter($twig) {
  if (variable_get('slate_debug_enabled', FALSE)) {
    $twig->addExtension(new Twig_Extension_Debug());
  }

  // @todo add a setting for this?
  $twig->registerUndefinedFunctionCallback(function($name) {
    if (function_exists($name)) {
      return new Twig_SimpleFunction($name, function() use($name) {
        return call_user_func_array($name, func_get_args());
      });

      return FALSE;
    }
  });

  // @todo add a setting for this?
  $twig->addFunction(new Twig_SimpleFunction('view_mode', function ($entity, $view_mode) {
     $build = $entity->view($view_mode);

     return render($build);
  }));
}

/**
 * Implements hook_module_implements_alter().
 */
function slate_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'entity_info_alter') {
    $group = $implementations['slate'];

    unset($implementations['slate']);

    $implementations['slate'] = $group;
  }
}

/**
 * Implements hook_entity_info_alter().
 *
 * @todo manage default view mode as well.
 */
function slate_entity_info_alter(&$info) {
  $view_callback = array();

  foreach (slate_get_slates() as $slate => $slate_info) {
    if (empty($slate_info['view_mode'])) {
      continue;
    }

    foreach ($slate_info['view_mode'] as $type => $bundles) {
      if (empty($info[$type])) {
        continue;
      }

      if (!isset($view_callback[$type])) {
        $view_callback[$type] = isset($info[$type]['view callback']) ? $info[$type]['view callback'] : 'entity_view';
      }

      // change view callback so that we can use slate to render.
      $info[$type]['view callback'] = 'slate_entity_view_callback';
      $info[$type]['entity view callback'] = $view_callback[$type];

      // add slate info to all bundles if '*' is used.
      if (!empty($bundles['*'])) {
        $view_mode = $bundles['*'];

        foreach (array_keys($info[$type]['bundles']) as $bundle) {
          // skip bundles that already has an slate defined.
          if (!empty($info[$type]['bundles'][$bundle]['slate'][$view_mode])) {
            continue;
          }

          // add slate info to bundle.
          $info[$type]['bundles'][$bundle]['slate'][$view_mode] = $slate;

          if (!empty($info[$type]['view modes'][$view_mode])) {
            continue;
          }

          $info[$type]['view modes'][$view_mode] = array(
            'label' => $view_mode, // @todo make nice case. do it. do it now.
            'custom settings' => FALSE,
          );
        }
      }

      // add slate info to specific bundles.
      foreach ($bundles as $bundle => $view_mode) {
        if (empty($info[$type]['bundles'][$bundle])) {
          continue;
        }

        // add slate info to bundle.
        $info[$type]['bundles'][$bundle]['slate'][$view_mode] = $slate;

        if (!empty($info[$type]['view modes'][$view_mode])) {
          continue;
        }

        $info[$type]['view modes'][$view_mode] = array(
          'label' => $view_mode, // @todo make nice case. do it. do it now.
          'custom settings' => FALSE,
        );
      }
    }
  }
}

/**
 * Custom view callback.
 */
function slate_entity_view_callback($entities, $view_mode = 'full', $langcode = NULL, $entity_type) {
  $info = entity_get_info($entity_type);

  $fallback = $info['entity view callback'];

  $build = array();

  foreach ($entities as $key => $entity) {
    list( , , $bundle) = entity_extract_ids($entity_type, $entity);

    if (empty($info['bundles'][$bundle]['slate'])) {
      $fallback_build = $fallback(array($key => $entity), $view_mode, $langcode, $entity_type);
      $build += $fallback_build[$entity_type];

      continue;
    }

    $slates = $info['bundles'][$bundle]['slate'];

    if (!isset($slates[$view_mode])) {
      $fallback_build = $fallback(array($key => $entity), $view_mode, $langcode, $entity_type);
      $build += $fallback_build[$entity_type];

      continue;
    }

    $build[$key] = array(
      '#markup' => slate_render($slates[$view_mode], array('entity' => $entity))
    );

    drupal_alter(array('slate_' . $entity_type . '_view', 'slate_entity_view'), $build, $view_mode, $entity_type);
  }

  return array($entity_type => $build);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @todo manage default view mode as well.
 */
function slate_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];
  $view_mode = $form['#view_mode'];

  $slates = slate_get_slates();

  foreach ($slates as $slate) {
    if (empty($slate['view_mode'])) {
      continue;
    }

    if (empty($slate['view_mode'][$entity_type][$bundle])) {
      continue;
    }

    if ($slate['view_mode'][$entity_type][$bundle] !== $view_mode) {
      continue;
    }

    // @todo need a better way to display this.
    drupal_set_message('Slate is used to render this view mode.');

    return;
  }
}
