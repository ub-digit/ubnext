<?php

/**
 * Implementation of hook_feed_plugins (CTools plugin declarations)
 */
function ubn_databases_feeds_plugins() {
  $path = drupal_get_path('module', 'ubn_databases') . '/plugins/feeds';
  $info = array();
  $info['UBNDatabasesFeedsFetcherBase'] = array(
    'name' => 'UBN Database fetcher base class',
    'description' => 'Hidden base class.',
    'hidden' => TRUE,
    'handler' => array(
      'parent' => 'FeedsFetcher', // This is the key name, not the class name.
      'class' => 'UBNDatabasesFeedsFetcherBase',
      'file' => 'UBNDatabasesFeedsFetchers.inc',
      'path' => $path,
    ),
  );
  $info['UBNDatabasesFeedsFetcher'] = array(
    'name' => 'UBN Database fetcher',
    'description' => 'Fetch Academic Databases.',
    'handler' => array(
      'parent' => 'UBNDatabasesFeedsFetcherBase',
      'class' => 'UBNDatabasesFeedsFetcher',
      'file' => 'UBNDatabasesFeedsFetchers.inc',
      'path' => $path,
    ),
  );
  $info['UBNDatabasesCategoriesFeedsFetcher'] = array(
    'name' => 'UBN Databases categories fetcher',
    'description' => 'Fetch Database categories.',
    'handler' => array(
      'parent' => 'UBNDatabasesFeedsFetcherBase',
      'class' => 'UBNDatabasesCategoriesFeedsFetcher',
      'file' => 'UBNDatabasesFeedsFetchers.inc',
      'path' => $path,
    ),
  );
  $info['UBNDatabasesKeywordsFeedsFetcher'] = array(
    'name' => 'UBN Databases keywords fetcher',
    'description' => 'Fetch Databases keywords.',
    'handler' => array(
      'parent' => 'UBNDatabasesFeedsFetcherBase',
      'class' => 'UBNDatabasesKeywordsFeedsFetcher',
      'file' => 'UBNDatabasesFeedsFetchers.inc',
      'path' => $path,
    ),
  );
  $info['UBNDatabasesUrlsFeedsFetcher'] = array(
    'name' => 'UBN Databases urls fetcher',
    'description' => 'Fetch Databases urls.',
    'handler' => array(
      'parent' => 'UBNDatabasesFeedsFetcherBase',
      'class' => 'UBNDatabasesUrlsFeedsFetcher',
      'file' => 'UBNDatabasesFeedsFetchers.inc',
      'path' => $path,
    ),
  );
  $info['UBNDatabasesUrlsAccessDescriptionsFeedsFetcher'] = array(
    'name' => 'UBN Databases urls access descriptions fetcher',
    'description' => 'Fetch Databases urls access descriptions.',
    'handler' => array(
      'parent' => 'UBNDatabasesFeedsFetcherBase',
      'class' => 'UBNDatabasesUrlsAccessDescriptionsFeedsFetcher',
      'file' => 'UBNDatabasesFeedsFetchers.inc',
      'path' => $path,
    ),
  );
  return $info;
}

function ubn_databases_ctools_plugin_api($owner, $api) {
  if ($owner == 'feeds' && $api == 'plugins') {
    return array('version' => 1);
  }
}

function ubn_databases_form_node_form_alter(&$form, $form_state, $form_id) {
  if($form_id === 'database_node_form') {
    $form['field_topics']['und']['#size'] = 25; //Field widget setting for this?
    $form['field_topics_depth_0']['#access'] = FALSE;
    $form['field_topics_depth_1']['#access'] = FALSE;
    $form['field_recommended_in_subjects']['und']['#size'] = 25; //Field widget setting for this?
    $form['#validate'][] = 'ubn_databases_form_validate';
  }
}

function ubn_databases_form_validate($form, &$form_state) {
  $all_terms = $form_state['values']['field_topics'];
  $all_terms_clean = array();
  $parent_terms_that_should_exist = array();
  $parent_terms_that_should_exist_clean = array();
  foreach ($all_terms['und'] as $item) {
    $all_terms_clean[] = $item['tid']; 
  }
  foreach ($all_terms_clean as $item) {
    $temp_arr = taxonomy_get_parents($item);
    if (!empty($temp_arr)) {
      $parent_terms_that_should_exist[] = $temp_arr;
    }
  }
  foreach ($parent_terms_that_should_exist as $item) {
    $parent_terms_that_should_exist_clean[] = (string)key($item);
  }
  $result_diff = array_diff($parent_terms_that_should_exist_clean, $all_terms_clean);
  if (!empty($result_diff)) {
    form_set_error('field_topics', 'A subject need its parent to be selected.');
  }
}


function ubn_databases_database_url_is_public_access($url) {
  return strpos($url, 'ezproxy.') === FALSE;
}

function _ubn_databases_is_this_database_public($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $isPublic = FALSE; // PRIVATE 
  foreach ($wrapper->field_database_urls as $url) {
      if (is_null($url->field_public_access->value())) {
         if (ubn_databases_database_url_is_public_access($url->field_url->url->value())) {
            // make database public
            $isPublic = TRUE;
            break;
          }
      }
      else {
        if ($url->field_public_access->value()) {
          // make dababase public
          $isPublic = TRUE;
          break;
        }        
      }
  }
 return $isPublic;
}



function ubn_databases_node_presave($node) {
  if($node->type === 'database') {
    //TODO: require entity api
    $wrapper = entity_metadata_wrapper('node', $node);
    $terms_by_depth = array();
    if(!empty($wrapper->field_topics)) {
      foreach($wrapper->field_topics as $term) {
        // parents_all also include the term itself
        $parents_terms = array();
        foreach($term->parents_all as $parent) {
          $parents_terms[] = $parent;
        }
        foreach(array_reverse($parents_terms) as $depth => $term) {
          if(!isset($terms_by_depth[$depth])) {
            $terms_by_depth[$depth] = array();
          }
          $terms_by_depth[$depth][$term->getIdentifier()] = $term;
        }
      }
    }
    foreach($terms_by_depth as $depth => $terms) {
      $field = 'field_topics_depth_' . $depth;
      $tids = array();
      foreach($terms as $term) {
        $tids[] = $term->getIdentifier();
      }
      if($wrapper->get($field)) {
        $wrapper->get($field)->set($tids);
      }
    }
  }
}

function _ubn_databases_set_access_rule($node) {
   $wrapper = entity_metadata_wrapper('node', $node);
  // update the global setting for access on the database item based on url:s
  if (_ubn_databases_is_this_database_public($node)) {
    $wrapper->field_public_access->set(TRUE);
  }
  else {
    $wrapper->field_public_access->set(FALSE);
  }
  $wrapper->save();
}

function ubn_databases_field_attach_update($type, $entity) {
  static $saving = FALSE;
  if($type === 'node' && $entity->type === 'database' && !$saving) {
     $saving = TRUE;
 //   _ubn_databases_set_access_rule($entity);
    $saving = FALSE;
  }
}

function ubn_databases_field_attach_insert($type, $entity) {
  static $saving = FALSE;
  if($type === 'node' && $entity->type === 'database' && !$saving) {
     $saving = TRUE;
//    _ubn_databases_set_access_rule($entity);
    $saving = FALSE;
  }
}

function ubn_databases_node_update($node) {
  if($node->type === 'database') {
  }
  
}


