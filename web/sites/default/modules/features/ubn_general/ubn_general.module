<?php
/**
 * @file
 * Code for the General feature.
 */

include_once 'ubn_general.features.inc';

function ubn_general_module_implements_alter(&$implementations, $hook) {
  if($hook === 'search_api_query_alter') {
    // Prepend ubn_general_search_api_query_alter at front
    // of array so we get to run first
    $group = $implementations['ubn_general'];
    unset($implementations['ubn_general']);
    $implementations = array('ubn_general' => $group) + $implementations;
  }
}

/**
 * Implements hook_search_api_query_alter().
 *
 * Set anonymous user as user to authenticate against
 *
 * @param SearchApiQueryInterface $query
 *   The SearchApiQueryInterface object representing the search query.
 */
function ubn_general_search_api_query_alter(SearchApiQueryInterface $query) {
  $query->setOption('search_api_access_account', drupal_anonymous_user());
}

/**
 * Implements hook_node_insert()
 */
function ubn_general_node_insert($node) {
  _ubn_general_node_save($node);
}

/**
 * Implements hook_node_update()
 */
function ubn_general_node_update($node) {
  if (
    in_array($node->type, array('page', 'navigation_landing')) &&
    //empty($node->is_draft_revision) && //Hmmmm??
    isset($node->menu) &&
    isset($node->menu['mlid']) &&
    !empty($node->menu['mlid'])
    /* &&
    isset($node->path) &&
    (!isset($node->path['old_alias']) || $node->path['alias'] !== $node->path['old_alias'])
    */
  ) {
    $mlid = $node->menu['mlid'];
    $children_nids = _ubn_general_menu_children_nids($mlid);
    if(!empty($children_nids)) {
      drupal_set_message(t('Updating path aliases for menu children pages.'));
      pathauto_node_update_alias_multiple($children_nids, 'bulkupdate', array('message' => TRUE));
    }
  }
  _ubn_general_node_save($node);
}

function _ubn_general_node_save($node) {
  _ubn_general_clear_slate_cache();
  if (empty($node->is_draft_revision) &&
    (
      ($node->is_new && $node->status == NODE_PUBLISHED) ||
      (
        isset($node->workbench_moderation) &&
        $node->workbench_moderation['my_revision']->published != $node->status
      ) //TODO: a bit too "clever"
    )
  ) {
    // Node is new or has changed publication status
    // (gone from published -> unpublished or unpublished -> published
    _ubn_general_clear_page_cache();
  }
}

/**
 * Implements hook_entity_translation_delete()
 */
function ubn_general_entity_translation_delete() {
  _ubn_general_clear_content_caches();
}

/**
 * Implements hook_entity_translation_insert()
 */
function ubn_general_entity_translation_insert() {
  _ubn_general_clear_content_caches();
}

function ubn_general_entity_delete($entity) {
  _ubn_general_clear_content_caches();
}

function _ubn_general_clear_content_caches() {
  _ubn_general_clear_page_cache();
  _ubn_general_clear_slate_cache();
}

function _ubn_general_clear_page_cache() {
  cache_clear_all(NULL, 'cache_page');
}

//TODO: this should not be here
function _ubn_general_clear_slate_cache() {
  cache_clear_all('slate:', 'cache', TRUE);
}

function _ubn_general_menu_children_nids($plid) {
  $result = db_select('menu_links', 'ml')
    ->fields('ml', array('link_path', 'mlid', 'has_children'))
    ->condition('plid', $plid)
    ->condition('link_path', 'node/%', 'LIKE')
    ->execute();
  $nids = array();
  foreach($result as $item) {
    //Possible UUID Path!? menu_get_object?
    list(, $nid) = explode('/', $item->link_path);
    $nids[] = $nid;
    if ($item->has_children) {
      $nids = array_merge($nids, _ubn_general_menu_children_nids($item->mlid));
    }
  }
  return $nids;
}

function _ubn_general_import_databases() {
  foreach(
    array(
      'databases_topics',
      'databases_categories',
      'databases',
      'database_urls_field_collection'
    ) as $importer_id
  ) {
    _ubn_general_feeds_import($importer_id, 0, TRUE);
  }
}

function _ubn_general_feeds_import($importer_id, $feed_nid = 0, $skip_hash_check = TRUE) {

  db_update('feeds_source')
    ->condition('id', $importer_id)
    ->condition('feed_nid', $feed_nid)
    ->fields(array('state' => FALSE))
    ->execute();
  $source = feeds_source($importer_id, 0)->existing();

  if($skip_hash_check) {
    $importer = $source->importer();
    $config = $importer->processor->getConfig();
    if(empty($config['skip_hash_check'])) {
      $config['skip_hash_check'] = 1;
      $importer->processor->setConfig($config);
    }
  }

  $batch = 0;
  $t = drupal_is_cli() ? 'dt' : 't';
  while($source->import() !== FEEDS_BATCH_COMPLETE) {
    $message = $t(
      'Ran import batch !batch for !importer_id...',
      array(
        '!batch' => ++$batch,
        '!importer_id' => $importer_id
      )
    );
    if(drupal_is_cli()) {
      drush_log($message, 'ok');
    }
    else {
      drupal_set_message($message);
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ubn_general_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_strongarm_alter().
 */
function ubn_general_strongarm_alter(&$variables) {
  if (isset($variables['language_default']->value->javascript)) {
    $language_default = variable_get('language_default');

    $variables['language_default']->value->javascript = $language_default->javascript;
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Only works for entities of type 'node'.
 *
 * @param QueryAlterableInterface $query
 */
function ubn_general_query_ENTITY_TRANSLATION_alter(QueryAlterableInterface $query) {
  global $language_content;
  $query->join('entity_translation', 'entity_translation', "entity_translation.entity_type = 'node' AND entity_translation.entity_id = node.nid");
  $query->condition('entity_translation.language', $language_content->language, '=');
  //Make this configurable through metadata?
  $query->condition('entity_translation.status', 1, '=');
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Only works for entities of type 'taxonomy_term'.
 *
 * @param QueryAlterableInterface $query
 */
function ubn_general_query_TAXONOMY_TERM_ENTITY_TRANSLATION_alter(QueryAlterableInterface $query) {
  global $language_content;
  $query->join('entity_translation', 'entity_translation', "entity_translation.entity_type = 'taxonomy_term' AND entity_translation.entity_id = taxonomy_term_data.tid");
  $query->condition('entity_translation.language', $language_content->language, '=');
}

function ubn_general_entityreference_selectionhandler_efq_alter(&$query, $handler) {
  /*
  $entity_type = $handler->field['settings']['target_type'];
  $entity_info = entity_get_info($entity_type);
  $legacy_field = $entity_info['entity keys']['label'];
  $replacement_field_info = title_field_replacement_info($entity_type, $legacy_field);

  if (!empty($replacement_field_info)) {
    $bundles = $handler->field['settings']['handler_settings']['target_bundles'];

    $title_field_replacement_enabled = FALSE;
    $title_field_replacement_all = NULL;
    foreach($bundles as $bundle) {
      if($info = title_field_replacement_enabled($entity_type, $bundle, $legacy_field)) {
        $title_field_replacement_enabled = TRUE;
      }
      else {
        $title_field_replacement_all = FALSE;
      }
    }
    if (!isset($title_field_replacement_all)) {
      $title_field_replacement_all = $title_field_replacement_enabled;
    }

    if ($title_field_replacement_enabled && $title_field_replacement_all) {
      $label_property = $entity_info['entity keys']['label'];
      foreach($query->propertyConditions as $key => $condition) {
        if ($condition['column'] === $label_property) {
          $value = $condition['value'];
          $operator = $condition['operator'];
          //unset($query->propertyConditions[$key]);
          $title_field = $replacement_field_info['field']['field_name'];
          //$query->fieldCondition($title_field, 'value', $value, $operator);
          $query->fieldCondition($title_field, 'value', $value);
          break;
        }
      }
    }
  }
  */
}

/**
 * Implements hook_query_TAG_alter().
 *
 * @param QueryAlterableInterface $query
 */
function ubn_general_query_ENTITYREFERENCE_alter(QueryAlterableInterface $query) {
  $handler = $query->getMetaData('entityreference_selection_handler');
  $entity_type = $handler->field['settings']['target_type'];
  $entity_info = entity_get_info($entity_type);
  $legacy_field = $entity_info['entity keys']['label'];
  $replacement_field_info = title_field_replacement_info($entity_type, $legacy_field);

  if (!empty($replacement_field_info)) {
    $bundles = $handler->field['settings']['handler_settings']['target_bundles'];

    $title_field_replacement_enabled = FALSE;
    $title_field_replacement_all = NULL;
    foreach($bundles as $bundle) {
      if($info = title_field_replacement_enabled($entity_type, $bundle, $legacy_field)) {
        $title_field_replacement_enabled = TRUE;
      }
      else {
        $title_field_replacement_all = FALSE;
      }
    }
    if (!isset($title_field_replacement_all)) {
      $title_field_replacement_all = $title_field_replacement_enabled;
    }

    if ($title_field_replacement_enabled) {

      $base_table = $entity_info['base table'];

      $label_field = "$base_table.{$entity_info['entity keys']['label']}";
      $conditions = &$query->conditions();
      $value = NULL;
      foreach(array_keys($conditions) as $key) {
        if(isset($conditions[$key]['field']) && strpos($conditions[$key]['field'], $label_field) === 0) {
          if(isset($conditions[$key]['value'])) {
            $value = $conditions[$key]['value'];
            $operator = $conditions[$key]['operator'];
            unset($conditions[$key]);
          }
          break;
        }
      }
      if(isset($value)) {
        $title_field_name = $replacement_field_info['field']['field_name'];
        $field_info = field_info_field($title_field_name);
        if($field_info['storage']['type'] === 'field_sql_storage') {
          $field_table = _field_sql_storage_tablename($field_info);
          $entity_basetable = $entity_info['base table'];
          foreach($query->getTables() as $alias => $table) {
            if (strpos($alias, $entity_basetable) === 0) {
              $field_table_alias = $query->join(
                $field_table,
                $field_table,
                "$field_table.entity_id = $alias.{$entity_info['entity keys']['id']}"
              );
              $query->condition("$field_table_alias.entity_type", $entity_type, '=');
              $value_column = _field_sql_storage_columnname($field_info['field_name'], 'value');
              $query->condition("$field_table_alias.$value_column", $value, $operator);
              break;
            }
          }
        }
      }
    }
  }
}

/**
 * Custom strnatcmp to fix a bad, bad, bad PHP bug!
 */
function ubn_general_strnatcmp($left, $right) {
  if (extension_loaded('intl') === TRUE) {
    global $language;

    switch ($language->language) {
      case 'sv':
        $coll = collator_create('sv_SE');
        break;

      case 'en':
        $coll = collator_create('en_US');
        break;

      default:
        $coll = collator_create('root');
        break;
    }

    $coll->setAttribute(Collator::NUMERIC_COLLATION, Collator::ON);

    return $coll->compare($left, $right);
  }

  return strnatcmp($left, $right);
}

/**
 * Display entities on a map.
 */
function ubn_general_generate_map($entities) {
  global $language_content;

  $coords = array();
  foreach ($entities as $entity) {
    //dsm($entity->field_location['und'][0]['lat']);
    $wrapper = entity_metadata_wrapper('node', $entity);
    $wrapper->language($language_content->language);
    if (!empty($entity->field_location['und'])) {
      $coordinates = $entity->field_location['und'][0]['lat'] . ',' . $entity->field_location['und'][0]['lon'];
    }

    if (empty($coordinates)) {
      continue;
    }

    list($latitude, $longitude) = explode(',', $coordinates);

    $coords[] = array(
      'label' => $wrapper->label(),
      'latitude' => trim($latitude),
      'longitude' => trim($longitude),
    );
  }

  if (empty($coords)) {
    return "";
  }

  return ubn_general_render_map($coords);
}

/**
 * Add JS and cords to render a map.
 */
function ubn_general_render_map($coords = array()) {
  // @todo add this as a setting!
    if (!empty($coords[0]['longitude']) && !empty($coords[0]['latitude'])) {
    drupal_add_js('https://maps.googleapis.com/maps/api/js?key=AIzaSyCrHH1UmYwF_jHleEU6rBCf115wBXCb6KM', 'external');

    drupal_add_js(array('ubMap' => $coords), 'setting');
    drupal_add_js(drupal_get_path('module', 'ubn_general') . '/ubn_general.map.js');

    return '<div id="ub-map-canvas"></div>';
  }
}

function ubn_general_admin_paths() {
  return array(
    'atom/*' => TRUE,
  );
}

function ubn_general_field_collection_is_empty_alter(&$is_empty, FieldCollectionItemEntity $item) {
  if($item->field_name === 'field_content_sections') {
    $media_atoms = field_get_items('field_collection_item', $item, 'field_media_atoms');
    $file_atoms = field_get_items('field_collection_item', $item, 'field_file_atoms');
    $body = field_get_items('field_collection_item', $item, 'field_body');
    $title = field_get_items('field_collection_item', $item, 'field_title');
    $contacts = field_get_items('field_collection_item', $item, 'field_contact_instances');
    if(
      empty($media_atoms[0]['sid']) &&
      empty($file_atoms[0]['sid']) &&
      empty($body[0]['value']) &&
      empty($title[0]['value']) &&
      (empty($contacts) || empty($contacts[0]['field_referenced_contact']['und'][0]['target_id']))
    ) {
      $is_empty = TRUE;
    }
  } else if ($item->field_name === 'field_shortcut_links') {
      $file_atom = field_get_items('field_collection_item', $item, 'field_file');
      $link = field_get_items('field_collection_item', $item, 'field_link');

      if(
        empty($file_atom[0]['sid']) &&
        empty($link[0]['url']))
        {
        $is_empty = TRUE;
      }
  }
}

//Must be run before slate entity_info_alter?
function ubn_general_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['ubn_search_result'] = array(
    'label' => t('UBN search result'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_node_access()
 */
function ubn_general_node_access($node, $op, $account) {
  if(
    is_object($node) &&
    $node->type === 'embedded_page' &&
    $op === 'view' &&
    !$account->uid &&
    arg(0) === 'node' &&
    arg(1) === $node->nid
  ) {
    return NODE_ACCESS_DENY;
  }
  return NODE_ACCESS_IGNORE;
}
