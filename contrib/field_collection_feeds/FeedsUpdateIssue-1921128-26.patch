diff --git a/plugins/FeedsFieldCollectionProcessor.inc b/plugins/FeedsFieldCollectionProcessor.inc
index 8b25cbe..34ec82f 100644
--- a/plugins/FeedsFieldCollectionProcessor.inc
+++ b/plugins/FeedsFieldCollectionProcessor.inc
@@ -14,7 +14,7 @@ class FeedsFieldCollectionProcessor extends FeedsProcessor {
   public function entityType() {
     return 'field_collection_item';
   }
-  
+
   /**
    * Implements parent::entityInfo().
    */
@@ -28,77 +28,43 @@ class FeedsFieldCollectionProcessor extends FeedsProcessor {
    * Creates a new field collection item in memory and returns it.
    */
   protected function newEntity(FeedsSource $source) {
-    //$field_collection_item = entity_create('field_collection_item', array('field_name' => $this->config['field_name'], 'hostEntityType' => $this->config['host_entity_type']));
-    //$field_collection_item->setHostEntity($entity_type, $entity, LANGUAGE_NONE, FALSE);
-    $field_collection_item = new stdClass();
-    $field_collection_item->field_name = $this->config['field_name'];
-    $field_collection_item->hostEntityType = $this->config['host_entity_type'];
-
+    $field_collection_item = new FieldCollectionItemEntity(array('field_name' => $this->config['field_name']), $this->config['host_entity_type']);
+    $field_collection_item->is_new = TRUE;
     return $field_collection_item;
   }
 
   /**
    * Loads an existing entity.
    *
-   * If the update existing method is not FEEDS_UPDATE_EXISTING, only the entity
-   * table will be loaded, foregoing the entity_load API for better performance.
    */
   protected function entityLoad(FeedsSource $source, $id) {
-    $result = entity_load($this->entityType(), array($id));
-    return reset($result);
+    return entity_load_single($this->entityType(), $id);
   }
 
   /**
    * Save a entity.
    */
-  public function entitysave($entity) {
-
-    $values = (array)$entity;
-    $skip_host_save = FALSE;
-    $field_collection_item = entity_create('field_collection_item', $values);
-	  
-    if (!empty($entity->hostEntityId)) {
-      $hostEntity_array = entity_load($this->config['host_entity_type'], array($entity->hostEntityId));
-      $hostEntity = reset($hostEntity_array);
-      $field_collection_item->setHostEntity($this->config['host_entity_type'], $hostEntity);
-      //update by set item_id
-	 
-      if ($this->config['update_existing'] == FEEDS_UPDATE_EXISTING && isset($field_collection_item->identifier_field) && isset($this->config['identifier_field_name'])) {
-       
-	   $query = new EntityFieldQuery();
-        $query->entityCondition('entity_type', 'field_collection_item');
-        $query->entityCondition('bundle', $this->config['field_name']);
-        $items  = isset($hostEntity->{$this->config['field_name']}[LANGUAGE_NONE]) ? $hostEntity->{$this->config['field_name']}[LANGUAGE_NONE] : array();
-        $ids = field_collection_field_item_to_ids($items);
-		if(!empty($ids)){
-          $query->entityCondition('entity_id', $ids, 'IN');
-		
-          $query->fieldCondition($this->config['identifier_field_name'], 'value', $field_collection_item->identifier_field);
-          $result = $query->execute();
-		
-          list($EntityType, $data) = each($result);
-          $field_collection_item->item_id = $data ? key($data) : FALSE;
-		}
-        if (!empty($field_collection_item->item_id)) {
-          $field_collection_item->is_new = NULL;
-		  $old_field_collection_item = field_collection_item_load($field_collection_item->item_id);
-		  $field_collection_item->revision_id = $old_field_collection_item->revision_id;
-          $skip_host_save = TRUE;
-        }
-        //drupal_set_message('123:'.$field_collection_item->item_id);
-      }
-	  
-
+  public function entitySave($entity) {
+    if(method_exists($entity, 'hostEntityId')) {
+      $entityid = $entity->hostEntityId();
+    }
+    else {
+      $entityid = $entity->hostEntityId;
+    }
+    if (!empty($entityid)) {
+      $entity->save();
     }
-	
-    $field_collection_item->save($skip_host_save);
   }
 
   /**
    * Delete a series of entities.
    */
   protected function entityDeleteMultiple($ids) {
-    entity_delete_multiple($this->entityType(), $ids);
+    //Why not delete multiple?
+    $entities = field_collection_item_load_multiple($ids);
+    foreach ($entities as $entity) {
+      $entity->delete();
+    }
   }
   /**
    * Override parent::configDefaults().
@@ -109,7 +75,6 @@ class FeedsFieldCollectionProcessor extends FeedsProcessor {
       'host_entity_type' => NULL,
       'is_field' => NULL,
       'guid_field_name' => '',
-      'identifier_field_name' => '',
     ) + parent::configDefaults();
   }
 
@@ -130,6 +95,8 @@ class FeedsFieldCollectionProcessor extends FeedsProcessor {
       '#default_value' => isset($this->config['field_name']) ? $this->config['field_name'] : NULL,
       '#description' => t('The machine-readable name of the field collection field containing this item.'),
     );
+
+    //TODO: list only entity types with bundles with field collections?
     $entity_types = array();
     foreach (entity_get_info() as $entity_type => $entity_info) {
       $entity_types[$entity_type] = $entity_info['label'];
@@ -153,22 +120,15 @@ class FeedsFieldCollectionProcessor extends FeedsProcessor {
       '#description' => t('Machine name of the field/property that used for Host Entity GUID.'),
       '#default_value' => isset($this->config['guid_field_name']) ? $this->config['guid_field_name'] : '',
     );
-    $form['identifier_field_name'] = array(
-      '#type' => 'textfield',
-      '#title' => t('Identifier field name'),
-      '#description' => t('Machine name of the identifier field which is unique in host entity.'),
-      '#default_value' => isset($this->config['identifier_field_name']) ? $this->config['identifier_field_name'] : '',
-    );
     return $form;
   }
 
   /**
    * Override setTargetElement to operate on a target item that is a entity.
    */
-  //public function setTargetElement(FeedsSource $source, $target_item, $target_element, $value, $mapping) {
   public function setTargetElement(FeedsSource $source, $target_item, $target_element, $value) {
-    
     switch ($target_element) {
+      //TODO: add feeds host entity guid?
       case 'host_entity_guid':
         $query = new EntityFieldQuery();
         $query->entityCondition('entity_type', $this->config['host_entity_type']);
@@ -179,8 +139,20 @@ class FeedsFieldCollectionProcessor extends FeedsProcessor {
           $query->propertyCondition($this->config['guid_field_name'], $value);
         }
         $result = $query->execute();
-        list($hostEntityType, $data) = each($result);
-        $target_item->hostEntityId = $data ? key($data) : FALSE;
+        if(!empty($result)) {
+          list($hostEntityType, $data) = each($result);
+          $entity_id = key($data);
+          //Load skipping cache with $reset = TRUE, or will static cache reset on
+          //save?
+          $host_entity = entity_load($hostEntityType, array($entity_id), array(), TRUE);
+          $host_entity = current($host_entity);
+          if(!$target_item->hostEntityId()) {
+            $target_item->setHostEntity($hostEntityType, $host_entity);
+          }
+          else {
+            $target_item->updateHostEntity($host_entity);
+          }
+        }
         break;
       default:
         parent::setTargetElement($source, $target_item, $target_element, $value);
@@ -207,12 +179,6 @@ class FeedsFieldCollectionProcessor extends FeedsProcessor {
       'description' => t('The globally unique identifier of the host entity. Must be unique. We used this value to fetch hostEntityId.'),
     );
 
-    // Add identifier field target
-    $targets['identifier_field'] = array(
-      'name' => t('Identifier Field'),
-      'description' => t("The field collection item's identifier field within host entity. We used this value to fetch item id."),
-    );
-
     $targets['item_id'] = array(
       'name' => t('Item ID'),
       'description' => t('The item id of the field collection. NOTE: use this feature with care, field collection item ids are usually assigned by Drupal.'),
@@ -227,4 +193,4 @@ class FeedsFieldCollectionProcessor extends FeedsProcessor {
 
     return $targets;
   }
-}
\ No newline at end of file
+}
