<?php

function menu_position_uuid_entity_info_alter(&$info) {
  $info['menu_position_rule']['uuid'] = TRUE;
  $info['menu_position_rule']['entity keys']['uuid'] = 'uuid';
}

//Or just pipe alter? Use features alter hook instead?
function menu_position_uuid_uuid_entity_features_menu_position_rule_export_alter(&$export, &$pipe, $context) {
  $export['dependencies']['menu_position_uuid'] = 'menu_position_uuid';
  $rules = entity_uuid_load('menu_position_rule', $context['data']);
  foreach($rules as $rule) {
    //$pipe['uuid_entity_menu_link'][$rule->mlid] = $rule->mlid;
    $pipe['uuid_entity_menu_link'][$rule->plid] = $rule->plid;
  }
}

function menu_position_uuid_features_api_alter(&$components) {
  //Make sure menu link items are rebuilt first
  $components['uuid_entity_menu_position_rule']['weight'] = $components['uuid_entity_menu_link']['weight'] + 1;
}

function menu_position_uuid_uuid_entity_features_export_render_menu_position_rule_entity_alter($rule, $context) {
  //TODO: perhaps explain why this is a good idea
  unset($rule->mlid);
}

/**
 * Implements hook_entity_uuid_load().
 */
function menu_position_uuid_entity_uuid_load(&$entities, $entity_type) {
  if ($entity_type == 'menu_position_rule') {
    $mlids = array();
    foreach ($entities as $rule) {
      $mlids[] = $rule->plid;
      $mlids[] = $rule->mlid;
    }
    $menu_links_uuids = entity_get_uuid_by_id('menu_link', $mlids);
    foreach ($entities as $rule) {
      if (isset($menu_links_uuids[$rule->plid])) {
        $rule->plid = $menu_links_uuids[$rule->plid];
      }
      if (isset($menu_links_uuids[$rule->mlid])) {
        $rule->mlid = $menu_links_uuids[$rule->mlid];
      }
      if (!empty($rule->conditions)) {
        foreach ($rule->conditions as $plugin_key => $plugin_settings) {
          $callback = menu_position_get_uuid_load_callback($plugin_key);
          if($callback) {
            $rule->conditions[$plugin_key] = $callback($plugin_settings);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_uuid_presave().
 */
function menu_position_uuid_entity_uuid_presave(&$entity, $entity_type) {
  if ($entity_type == 'menu_position_rule') {
    $uuids = array($entity->plid);
    if(!empty($entity->mlid)) {
      $uuids[] = $entity->mlid;
    }
    $menu_links_ids = entity_get_id_by_uuid('menu_link', $uuids);
    $entity->plid = $menu_links_ids[$entity->plid];
    if(!empty($entity->mlid)) {
      $entity->mlid = $menu_links_ids[$entity->mlid];
    }
    if(!empty($rule->conditions)) {
      foreach($rule->conditions as $plugin_key => $plugin_settings) {
        $callback = menu_position_get_uuid_presave_callback($plugin_key);
        if($callback) {
          $rule->conditions[$plugin_key] = $callback($plugin_settings);
        }
      }
    }
  }
}
